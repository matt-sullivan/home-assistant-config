substitutions:
  device_name: lights-emily
  friendly_name: "Emily Lights"
  deviceicon: "mdi:light-recessed"
# Pin assignments for 2 gang 2 way model. (6952HA)
# P6 - Relay 2
# P9 - Power Sensor Switch 2
# P23 - Switch 2

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

bk72xx:
  board: wb3s

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  reboot_timeout: 24h
  encryption:
    key: "qRWAO5qNlxXIPaFK4/uw5cG8gXDK7/nf/Bc8iz97P9Y="

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 1h

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Fallback Hotspot"
    password: !secret fallback_password

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

captive_portal:

## ------------ ##
##     Light    ##
## ------------ ##
light:
  # This is the main light component exposed to HA, but it's state needs to be updated by the
  # power status sensor, so do not connect it's output directly to the relay. I.e. When the button
  # is pressed or the HA light entity is toggled we want to toggle the relay, then expect the power
  # status sensor to change soon after (which is ok because the power sensor should set it to the
  # same state it's already in.) If the remote physical light switch is switched, the power sensor
  # will detect the change and we want to update this light entities state without toggling the
  # relay. That's implemented by ignoring state changes soon after the power sensor has changed.
  - platform: binary
    id: light1
    name: "Light"
    icon: ${deviceicon}
    output: dummy1
    # I'd prefer 'on_state' to handle turn off and turn on (given the actions are the same,) but
    # if you use a voice command to turn off while already off it toggles it on.
    on_state:
      then:
        - lambda: |-
            ESP_LOGI("STATEDEBUG", "on_state");
    on_turn_on:
      then:
        - logger.log: "on_turn_on"
        - switch.turn_off: relay1
    on_turn_off:
      then:
        - logger.log: "on_turn_off"
        - switch.turn_on: relay1

script:
  - id: power_sensor_changed
    parameters:
      state: boolean
    mode: restart
    then:
      - lambda: |-
          ESP_LOGI("STATEDEBUG", "power_sensor_changed - skipping any action, state=%d", state);
      # delay before ending the script so the light component can check whether how long it's been
      # since the power sensor changed
      - delay: 400ms
      - lambda: |-
          ESP_LOGI("STATEDEBUG", "power_sensor_changed finished");


## ---------------- ##
##     Switches     ##
## ---------------- ##
switch:
  # This is the real output to control the relay, use a switch component rather than an output so
  # other code can call toggle (outputs only have turn_on/off) 
  - platform: gpio
    id: relay1
    name: "Relay Output"
    pin: P14
    internal: true

  - platform: restart
    name: "Reboot"


## ----------------- ##
##      Buttons      ##
## ----------------- ##
binary_sensor:
  # channel 1 button
  - platform: gpio
    id: button
    name: "Button"
    pin:
      number: P26
      inverted: true
      mode: INPUT_PULLUP
    on_press:
      - light.toggle: light1

  # channel 1 power status sensor
  - platform: gpio
    id: power_status_1
    name: "Power Status"
    pin:
      number: P8
      mode: INPUT_PULLUP
      inverted: true
    on_state:
      then:
        - script.execute:
            id: power_sensor_changed
            state: !lambda return x;

output:
  # Dummy output to allow the light to have an output connected, but we don't need it to do
  # anything
  - platform: template
    type: binary
    id: dummy1
    write_action:
      then:
        # use delay 0 to supply an action that does nothing
        - delay: 0s


## ------------------ ##
##    Generic Sensors ##
## ------------------ ##
sensor:
  - platform: wifi_signal
    name: Wifi Signal Strength
    update_interval: 60s
  
  - platform: uptime
    name: "Uptime"
    filters:
      - lambda: return x / 86400.0;
    unit_of_measurement: "d"
    accuracy_decimals: 1
    update_interval: 5min

## ---------------- ##
##    Status LED    ##
## ---------------- ##
status_led:
  pin:
    number: P24
    inverted: true
